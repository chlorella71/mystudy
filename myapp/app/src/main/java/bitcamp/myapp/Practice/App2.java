/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitcamp.myapp.Practice;

import java.util.Scanner;

public class App2 {

  // 애플리케이션 클래스 App을 실행할 때 다음 변수를 미리 준비해둔다
  static final String ANSI_BOLD_RED = "\033[1;31m";
  static final String ANSI_CLEAR = "\033[0m";
  static final String ANSI_RED = "\033[0;31m";
  static final String APP_TITLE =
      ANSI_BOLD_RED + "[과제관리 시스템]" + ANSI_CLEAR; //final 변수일때는 appTitle에서 APP_TITLE로 변경
  static final String[] MENUS = { //menus도 대문자로 변경
      "1. 과제",
      "2. 게시글",
      "3. 도움말",
      ANSI_RED + "4. 종료" + ANSI_CLEAR
  };

  public static void main(String[] args) {
    printMenu();
/*    String ANSI_BOLD_RED = "\033[1;31m";
    String ANSI_CLEAR = "\033[0m";
    String ANSI_RED = "\033[0;31m";
    String appTitle = "[과제관리 시스템]";

    String[] menus = {
        "1. 과제",
        "2. 게시글",
        "3. 도움말",
        ANSI_RED + "4. 종료" + ANSI_CLEAR
    };
*/
 /*   System.out.println(ANSI_BOLD_RED + appTitle + ANSI_CLEAR);
    System.out.println();
    for (String menu : menus) {
      System.out.println(menu);
    }*/
    /*String[] menus = new String[4];
    menus[0] = "1. 과제";
    menus[1] = "2. 게시글";
    menus[2] = "3. 도움말";
    menus[3] = ANSI_RED + "4. 종료" + ANSI_CLEAR;*/
    //String[] menus = {"1. 과제", "2. 게시글", "3. 도움말", ANSI_RED + "4.종료" + ANSI_CLEAR};

    /*{
      System.out.println(ANSI_BOLD_RED + appTitle + ANSI_CLEAR);
      System.out.println();
    }*/
    /*for (int i = 0; i < menus.length; i++) {
      System.out.println(menus[i]);
    }*/
    /*String menu1 = "1. 과제",
        menu2 = "2. 게시글",
        menu3 = "3. 도움말",
        menu4 = "4. 종료"; */
  /*  {
      System.out.println(ANSI_BOLD_RED + appTitle + ANSI_CLEAR);
      System.out.println();
    }
    */
/*    System.out.println("\u001B[31m[과제관리 시스템]\033[0m");
    System.out.println("\u001B[1;31m[과제관리 시스템]\033[0m");*/
  /*  System.out.println();
    System.out.println(menu1);
    System.out.println(menu2);
    System.out.println(menu3);
    System.out.println(ANSI_RED + menu4 + ANSI_CLEAR);
*/
    java.util.Scanner keyIn = new java.util.Scanner(System.in);

    loop:
    while (true) {
      String input = prompt(keyIn);
     /* System.out.print("> ");
      String input = keyIn.nextLine(); */
      switch (input) {
        case "1":
          System.out.println("과제입니다.");
          break;
        case "2":
          System.out.println("게시글입니다.");
          break;
        case "3":
          System.out.println("도움말입니다.");
          break;
        case "4":
          System.out.println("종료입니다.");
          break loop;
        case "menu":
          // 코드를 기능 단위로 묶어 메서드로 정의하면
          // 메서드의 이름을 통해 해당 기능을 쉽게 유추할 수 있어 유지보수에 좋다.
          printMenu();
         /* System.out.println(ANSI_BOLD_RED + appTitle + ANSI_CLEAR);
          System.out.println();
          for (int i = 0; i < menus.length; i++) {
            System.out.println(menus[i]);
      }*/
          //        System.out.println(ANSI_BOLD_RED + appTitle + ANSI_CLEAR);
/*    System.out.println("\u001B[31m[과제관리 시스템]\033[0m");
    System.out.println("\u001B[1;31m[과제관리 시스템]\033[0m");*/
 /*         System.out.println();
          System.out.println(menu1);
          System.out.println(menu2);
          System.out.println(menu3);
          System.out.println(ANSI_RED + menu4 + ANSI_CLEAR);*/
          break;
        default:
          System.out.println("메뉴 번호가 옳지 않습니다.");
          break;
      }
    }
    //int menuNo = keyIn.nextInt();

    /*  if (menuNo == 1) {
        System.out.println("과제입니다.");
      } else {
        if (menuNo == 2) {
          System.out.println("게시글입니다.");
        } else if (menuNo == 3) {
          System.out.println("도움말입니다.");
        } else if (menuNo == 4) {
          System.out.println("종료합니다.");
          break;
        } else {
          System.out.println("메뉴 번호가 옳지 않습니다.");
        }
      }
    }
    keyIn.close();*/
  }

  static void printMenu() {
    //ANSI 코드와 App 제목, 메뉴를 저장한 변수를 메서드 안에 두는 대신에
    //클래스 블록 안에 두면
    //printMenu()를 호출할 때마다 변수를 만들지 않기 때문에 실행 속도나 메모리 부분에서
    //훨씬 효율적이다.
    //보통 메서드 호출될 때마다 값이 바뀌는 변수가 아니라 고정 값을 갖는 변수인 경우
    //메서드 밖에 두는 것이 좋다.

 /*   String ANSI_BOLD_RED = "\033[1;31m";
    String ANSI_CLEAR = "\033[0m";
    String ANSI_RED = "\033[0;31m";
    String appTitle = "[과제관리 시스템]";

    String[] menus = {
        "1. 과제",
        "2. 게시글",
        "3. 도움말",
        ANSI_RED + "4. 종료" + ANSI_CLEAR
    };*/
    System.out.println(APP_TITLE);
    //System.out.println(ANSI_BOLD_RED + APP_TITLE + ANSI_CLEAR);
    System.out.println();
    for (String menu : MENUS) {
      System.out.println(menu);
    }
  }

  static String prompt(Scanner keyIn) {
    System.out.print("> ");
    return keyIn.nextLine();
    //String input = keyIn.nextLine();
    //return input;
  }
}
   /* String input = keyIn.nextLine();
    System.out.println(input);
    //System.out.print("번호를 입력하세요");
    int i = keyIn.nextInt(); */
/*
    if (i == 1) {
      System.out.println("과제입니다.");
    } else if (i == 2) {
      System.out.println("게시글입니다.");
    } else if (i == 3) {
      System.out.println("도움말입니다.");
    } else if (i == 4) {
      System.out.println("종료입니다.");
      keyIn.close();
    }*/


/*    System.out.println(new App().getGreeting());
public String getGreeting() {
    return "Hello World!";
  }
}*/






